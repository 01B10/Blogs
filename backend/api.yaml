openapi: 3.0.3
# swagger: '2.0'
info:
  title: This is my swagger UI Docs 123
  description: this is my comapny documentation made by me
  version: 1.0.0
  contact:
    email: giab8185@gmail.com
  liscene:
    name: Apache 2.0
    url: 'http://apache.org'
servers:
  - url: '{protocol}://localhost:{port}/api/v1'
    variables:
      port:
        enum:
          - '8080'
          - '3000'
        default: '8080'
      protocol:
        enum:
          - 'http'
          - 'https'
        default: 'http'
tags:
  - name: Category
    description: All data of Category
  - name: author
    description: SignUp - SignIn
  - name: Post_blog
    description: create blog
  - name: Comment_blog
    description: Comment blog
paths:
  /category:
    #get data:
    get:
      # security:
      #   - bearerAuth: [123]
      tags:
        - Category
      summary: get data of category
      description: take data
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              type: object
              properties:
                _id:
                  type: string
                name:
                  type: string
    #post data:
    post:
      tags:
        - Category
      summary: post data to category
      descripton: add data
      operationId: Post data
      requestBody:
        description: add new an data to category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

  /category/{id}:
    get:
      tags:
        - Category
      summary: get data by Id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    put:
      tags:
        - Category
      summary: Update item of category
      parameters:
        - in: path
          name: id
          desciption: Id of item from category need to be update
          required: true
          schema:
            type: string
      requestBody:
        description: Form add data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          description: Success
          content:
            application/jsonn:
              schema:
                $ref: '#/components/schemas/Category'
    delete:
      tags:
        - Category
      summary: delete item by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

  /sign-up:
    post:
      tags:
        - author
      summary: SignUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUp'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUp'
  /sign-in:
    post:
      tags:
        - author
      summary: SignIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignIn'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignIn'
  /posts:
    get:
      tags:
        - Post_blog
      summary: get all blogs
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    post:
      tags:
        - Post_blog
      summary: Post blog
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /posts/{id}:
    get:
      tags:
        - Post_blog
      summary: get blog by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    put:
      tags:
        - Post_blog
      summary: Delete fake a post by id
      description: Deletes a post with the given id and sets the deleted flag to true
      parameters:
        - in: path
          name: id
          description: ID of the post to delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A JSON object containing a success message and the deleted post
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Delete post successfully
                  post:
                    $ref: '#/components/schemas/Post'
        "400":
          description: A JSON object containing an error message if the post could not be deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Delete post failed
        "500":
          description: A JSON object containing an error message if there was a server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
    delete:
      tags:
        - Post_blog
      summary: delete blog by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /restore/{id}:
    put:
      tags:
        - Post_blog
      summary: Undo delete of a post by id
      description: Undoes the delete operation of a post with the given id by setting the deleted flag to false
      parameters:
        - in: path
          name: id
          description: ID of the post to undo delete
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A JSON object containing a success message and the post that was undone
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Undo delete post successfully
                  post:
                    $ref: '#/components/schemas/Post'
        "400":
          description: A JSON object containing an error message if the post could not be undone
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Undo delete post failed
        "500":
          description: A JSON object containing an error message if there was a server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error
  /comments:
    get:
      tags:
        - Comment_blog
      summary: get all comments
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Comments'
    post:
      tags:
        - Comment_blog
      summary: Send Comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comments'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Comments'
  /comments/{id}:
    get:
      tags:
        - Comment_blog
      summary: get Comment by Id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Comments'
    put:
      tags:
        - Comment_blog
      summary: update comment by id in blog
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
    delete:
      tags:
        - Comment_blog
      summary: delete comment by id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Comments'

components:
  schemas:
    Category:
      type: object
      required:
        - name
        - slug
      properties:
        name:
          type: string
        slug:
          type: string
      xml:
        name: Category
    SignUp:
      type: object
      required:
        - username
        - email
        - password
        - confirmPassword
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
    SignIn:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          default: giab@gmail.com
        password:
          type: string
          default: 12345
    Post:
      type: object
      required:
        - title
        - author
        - content
        - images
        - category
      properties:
        title:
          type: string
        author:
          type: string
        content:
          type: string
        images:
          type: array
          items:
            type: string
            default: 'url'
        likes:
          type: integer
          default: 0
        category:
          type: string
        comments:
          type: array
          items:
            type: string
          default: []
        is_active:
          type: boolean
          default: true
        status:
          type: string
          default: 'public'
        deleted:
          type: boolean
          default: false
    Comments:
      type: object
      required:
        - content
      properties:
        userId:
          type: string
        postId:
          type: string
        content:
          type: string

  securitySchemes:
    bearerAuth:
      type: apiKey
      name: Authorization
      in: header
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
